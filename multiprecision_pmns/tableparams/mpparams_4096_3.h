#define N 24
#define NBCHUNKS 3
#define LAMBDA 2
#define RHOver2 60

static const uint64_t RHOhi = 9300094045979778u;

static const int64_t M[3][47] = { {
		197645357614578180, 982974820269188120, 718744809507359966, 1148629450600230724, 719098364389145364, 619866775869399908, 763453623885974404, 603081370845805786, 975535069177335520, 457794085186839056, 282280618627321874, 652883152631168854, 915599829678509916, 151804856399487638, 382851474507731282, 57655064746280528, 93443419750649456, 700166227533595088, 324572701020695582, 290157194275752604, 153687527093735934, 513775955347619916, 101604228993250886, 75657185974472845, 98822678807289090, 491487410134594060, 359372404753679983, 1150775477603538850, 359549182194572682, 886394140238123442, 381726811942987202, 301540685422902893, 487767534588667760, 228897042593419528, 717601061617084425, 326441576315584427, 1034260667142678446, 652363180503167307, 767886489557289129, 28827532373140264, 46721709875324728, 926543866070221032, 738747102813771279, 145078597137876302, 653304515850291455, 833348729977233446, 627262866800048931
	}, {
		207858550077101228, 100108024119331832, 351222802417767722, 211460305109134419, 854458053308988514, 453969515328816125, 43486565562841564, 786030270056038726, 1145590010428132886, 612665545655070074, 1031538540756771351, 1045726320800600888, 749865605678844737, 107960658676720821, 242726778044763257, 386818801950097284, 670785133652459010, 227821775568615433, 791260956234003247, 803243086206137476, 772410389478742761, 488826250963772143, 1113990449090761457, 1132593269132568282, 680390027341974102, 626514764363089404, 175611401208883861, 105730152554567209, 1003689778957917745, 226984757664408062, 21743282781420782, 393015135028019363, 1149255757517489931, 306332772827535037, 515769270378385675, 522863160400300444, 951393555142845856, 630441081641783898, 121363389022381628, 769870153278472130, 335392566826229505, 690371640087731204, 395630478117001623, 978082295406492226, 962665947042794868, 820873877785309559, 1133455976848804216
	}, {
1997387311308051, 544550090605243, 581018965951966, 215181148808560, 477936939156181, 280274077012866, 2007355118843922, -113704859097004, -319470213736753, 1099152593011848, -966868029250868, 229177974159660, -212897536603999, -55274687733835, -229134071629746, -1433026874447465, 4048448371808716, 465527661062685, -145353050607044, 486412195643487, 377534283963005, 120748462593963, 1831010313349869, -362743261572819, 998693655654025, 272275045302621, 290509482975983, 107590574404280, 238968469578090, 140137038506433, 1003677559421961, -56852429548502, -159735106868377, 549576296505924, -483434014625434, 114588987079830, -106448768302000, -27637343866918, -114567035814873, -716513437223733, 2024224185904358, 232763830531342, -72676525303522, 243206097821743, 188767141981502, 60374231296981, 915505156674934
} };

static const int64_t M1[] = {
834371364155368892, 618665096800065440, 317516137258009882, 44749452011788760, 15367509628711660, 561421704467438790, 111111569172157144, 997448421045511922, 725750137346509546, 130694663641776580, 257214896613221334, 412152135591449916, 143252681099901508, 709276036999426728, 747195064371796076, 855283538458851078, 681721816445863650, 49683015298264128, 114149342946853648, 737623591052491496, 563262124206344194, 1142614125568974194, 986029031391042988, 157724718995515163, 993646434381107934, 885793300703456208, 735218820932428429, 22374726005894380, 584144507117779318, 280710852233719395, 632016536889502060, 498724210522755961, 362875068673254773, 641808084124311778, 705068200610034155, 782536820099148446, 648087092853374242, 931098770803136852, 373597532185898038, 1004102521532849027, 340860908222931825, 601302259952555552, 57074671473426824, 368811795526245748, 281631062103172097, 571307062784487097, 1069475267998944982
};

static const int64_t M0m0m1[23] = { 816777150871220826, -339682553735106422, 23479069754051299, -1093120412857258322, -266105762443923226, -186227912704528354, -57154110922291620, -11383491147150289, -334080007494931826, 284878912754200388, -615996832623833539, -250784390341111582, -935437988335389356, -160875770368573247, -408514084803609146, 1121947945230398586, 312827472319247954, -40149725832097590, -357020290870784077, 156462088285026591, -165536981261623695, -604451687383813918, 90338194817035494 };

static const int64_t M0m0m2[23] = { 717954472063931736, -831169963869700482, -335893334999628684, -1090974385853950196, -625654944638495908, 80299451664195180, -438880922865278822, -312924176570053182, -821847542083599586, 55981870160780860, -180676389634070988, -577225966656696009, -816777150871220826, 339682553735106422, -23479069754051299, 1093120412857258322, 266105762443923226, 186227912704528354, 57154110922291620, 11383491147150289, 334080007494931826, -284878912754200388, 615996832623833539 };

static const int64_t M1m0m1[23] = { 69475578336870635, -518554105686368583, 67115376835879396, 281088649395530075, -332904645305458735, 837017904207371, 769517673452582465, 410227951178118113, -376845368038747170, 182493478136237106, 598221178712375782, 609730108732267838, -271003527800871754, -3926317278694494, 54248012186502233, -664140000723904921, 668297212131688240, -463386882423323142, -373887195335580841, -585067160378472863, 186589810474695063, -514541104957774522, -617686706470418541 };

static const int64_t M1m0m2[23] = { 542007055601743509, 7852634557388989, -108496024373004465, 175358496840962865, -183672919656529504, -226147739760200692, 747774390671161683, 17212816150098750, -373179620949390125, -123839294691297931, 82451908333990106, 86866948331967394, -69475578336870635, 518554105686368583, -67115376835879396, -281088649395530075, 332904645305458735, -837017904207371, -769517673452582465, -410227951178118113, 376845368038747170, -182493478136237106, -598221178712375782 };

static const int64_t M2m0m1[23] = { -1211591192258024, -327549733036456, -519643554605729, -1540617448851745, 3809479902230626, 325390622556252, -1149030610029005, 543264625191989, 537269390831382, -428827833911961, 2314444327975303, -477332248652649, 1105142423956025, 299912389169539, 405076518790856, 824104011628013, -1785255716326268, -92626792024909, 1076354084725483, -300058527370245, -348502248849879, 489202065208943, -1398939171300368 };

static const int64_t M2m0m2[23] = { -2210284847912050, -599824778339078, -810153037581712, -1648208023256025, 3570511432652535, 185253584049819, -2152708169450966, 600117054740491, 697004497699758, -978404130417885, 2797878342600737, -591921235732479, 1211591192258024, 327549733036456, 519643554605729, 1540617448851745, -3809479902230626, -325390622556252, 1149030610029005, -543264625191989, -537269390831382, 428827833911961, -2314444327975303 };

static const int64_t M1_m0m1[23] = { 302527751325640550, -176517263704029480, 11976243439367647, -320012692153890278, 97577309328084332, -231027836935455267, 635054310664198564, -914022124077111441, 200387055533089421, 500806041444662416, 280960830781008833, 528109403503213693, 345559341527733692, -45305470099680644, -791300215860316585, 171193709079892329, -909637905711999483, 832330096888010819, -577979639190771740, 129912414996510213, 81244006570082676, -1082420483267022295, -364407067388910827 };

static const int64_t M1_m0m2[23] = { 461802821551379592, 90610940199361288, -723242577493060782, -342387418159784658, -486567197789694986, -511738689169174662, 3037773774696504, -259824829993020426, 990433491466681624, -141002042679649362, -424107369829025322, -254427416595934753, -302527751325640550, 176517263704029480, -11976243439367647, 320012692153890278, -97577309328084332, 231027836935455267, -635054310664198564, 914022124077111441, -200387055533089421, -500806041444662416, -280960830781008833 };

static inline void mtoep9(__int128* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	SCHOOLBOOK(N/6)

static inline void m1toep9(int64_t* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	M1SCHOOLBOOK(N/6)


static inline void mtoep10(__int128* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	TOEP33TOP(N/2, mtoep9)

static inline void m1toep10(int64_t* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	M1TOEP33TOP(N/2, m1toep9)


static inline void toeplitz_vm(__int128* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	TOEP22TOP(N, mtoep10)

static inline void ptoeplitz_vm(__int128* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	pTOEP22TOP(N, mtoep10)

static inline void m1toep20(int64_t* restrict rop, const int64_t* restrict vect, const int64_t* restrict matr)
	M1TOEP22TOP(N, m1toep10)


static inline void mtoeplitz_vm0(__int128* restrict rop, const int64_t* restrict vect)
{
	__int128 t0[N/2], t1[N/2], t2[N/2];
	int64_t v0p1[N/2];
	for(int i = 0; i < N/2; i++)
	{
		v0p1[i] = vect[i] + vect[i + N/2];
	}
	mtoep10(t0, v0p1, M[0] + N/2);
	mtoep10(t1, vect, M0m0m1);
	mtoep10(t2, vect + N/2, M0m0m2);
	for(int i = 0; i < N/2; i++)
	{
		rop[i] = t0[i] - t2[i];
		rop[i + N/2] = t0[i] - t1[i];
	}
}


static inline void mtoeplitz_vm1(__int128* restrict rop, const int64_t* restrict vect)
{
	__int128 t0[N/2], t1[N/2], t2[N/2];
	int64_t v0p1[N/2];
	for(int i = 0; i < N/2; i++)
	{
		v0p1[i] = vect[i] + vect[i + N/2];
	}
	mtoep10(t0, v0p1, M[1] + N/2);
	mtoep10(t1, vect, M1m0m1);
	mtoep10(t2, vect + N/2, M1m0m2);
	for(int i = 0; i < N/2; i++)
	{
		rop[i] = t0[i] - t2[i];
		rop[i + N/2] = t0[i] - t1[i];
	}
}


static inline void mtoeplitz_vm2(__int128* restrict rop, const int64_t* restrict vect)
{
	__int128 t0[N/2], t1[N/2], t2[N/2];
	int64_t v0p1[N/2];
	for(int i = 0; i < N/2; i++)
	{
		v0p1[i] = vect[i] + vect[i + N/2];
	}
	mtoep10(t0, v0p1, M[2] + N/2);
	mtoep10(t1, vect, M2m0m1);
	mtoep10(t2, vect + N/2, M2m0m2);
	for(int i = 0; i < N/2; i++)
	{
		rop[i] = t0[i] - t2[i];
		rop[i + N/2] = t0[i] - t1[i];
	}
}


// Utility function to extract the lower 64 bits of each vector coefficient
static inline void m1toeplitz_vm(int64_t* restrict rop, const __int128* restrict vect)
{
	int64_t t0[N/2], t1[N/2], t2[N/2];
	int64_t v0p1[N/2], v[N];
	for(int i = 0; i < N/2; i++)
	{
		v[i] = vect[i];
		v[i + N/2] = vect[i + N/2];
		v0p1[i] = v[i] + v[i + N/2];
	}
	m1toep10(t0, v0p1, M1 + N/2);
	m1toep10(t1, v, M1_m0m1);
	m1toep10(t2, v + N/2, M1_m0m2);
	for(int i = 0; i < N/2; i++)
	{
		rop[i] = t0[i] - t2[i];
		rop[i + N/2] = t0[i] - t1[i];
	}
}

void (* const multbym[3]) (__int128* restrict rop, const int64_t* restrict vect) = { mtoeplitz_vm0, mtoeplitz_vm1, mtoeplitz_vm2 };

