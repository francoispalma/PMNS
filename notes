IntegerLattice(matrix(B)).LLL() <- test w/ and w/o LLL
F = GF(P)
P.<X> = F[]
xgcd for gcd



---------------------------------------

RingPol.<X> = ZZ[]
E = X^5 - 2
M = -1168893757901713*X^4 - 9972106589416037*X^3 - 7474685133321913*X^2 - 18428526525862541*X + 14619627279334803
phi = 2**64
temp = xgcd(M, E)
M1 = (temp[1] * ZZ(pow(ZZ(temp[0]), -1, phi)) % phi)
((M * M1) % E) % phi


--------------------------------------------------

w = 1 + (n - 1) * abs(lam)
rho >= 2 * w * max([abs(elem) for elem in M])
phi >= 2 * w * rho
# w * (rho**2) >= max([abs(elem) for elem in V])
# norme infinie de A et B < rho donc norme infinie de A fois B < rho ** 2
# donc si A et B biens formÃ©s, vrai.
# on peut prendre rho = 2**(ceil(log2(2 * w * norme_infinie(M))))

-------------------------------------------------

#~ Data structure for each AMNS generated: [delta, n, E, rho_log2, gamma, M, M', conv_P0, conv_P1]

135235643069960614055763147653064061503447506836195743621526670176368184234720875133770858820476536434488752158042109408722131110950494765999584602783171012937442890496568352400298953673566640901275488915484314041362810104082501296367785554838617047203051373164870703338765011558032443485283660293658396373031

[4, 9, [-2, 0, 0, 0, 0, 0, 0, 0, 0, 1], 118, 31655366034728588078624438514615301544129522139330836045091327852751402305472801538659044715201150659916554681038263189819329423658063171106562974285532277781484292697032498794895427121795477802587356170442668003146237461337340801098373462588444085927763403266750253334246732747899661111138239398839213291694, [9185036727491196604204742321919291, 8690824125235645805505285094813519, -225671975413643839934818722285983, 4286465003152183139420723979962903, -7137431786534465636258514834221959, 6831995209575619850548179844185486, 9286296595018574599671025292418955, -5141911906720212737693797683033179, -882999883546772522596466739981589], [149805497353386644457162138719008802215, 96270926324245927689484526106950284395, 547867248944693336080922577499144824, 57880089224939758245581364606285563310, 163480393414515880008295052863831815842, 31011367151798100596511287287994348531, 242851348923327604697059746670995743830, 181970673218329530985199655450260323497, 50832549559064691956521287725177093124], [31836880838987577925023903541838245, 5262054521679769518647653768833404, 20906804872019598930435702793295957, 11571141751809778842664092788365005, 21344534330913506289643812769600671, 14505272869781992639563650091771079, 6825518584587914062498406744048310, 9802056671872927589859097142412267, 16365836111830244328527696624216310], [7853211404618600328083661147726651, 14523896865082968014603626655257429, 13385953861019155326807207656009853, 13358485197448381479057125397179079, 5711348225663467827232168299716956, -3433131044389198355809497929699537, 16330275218066983906292627628489816, 14877018575676225980514900196593450, -1139529649156909548971039294060433]]


--------------------------------------------------------------------------

x1 * 2**64 + x0
y1 * 2**64 + y0
x0 * y0 (128)
x0 * y1 (128)
x1 * y0 (128)
x1 * y1 (128)
awc x0y1 + x1y0
->
    128 |    128    | 128
V = x0y0|x0y1 + x1y0|x1y1
     64  |           64            
Q = x0y0l|(x0y0h + (x0y1 + x1y0)l)l
Q' = Q0M'0l | Q0M'0h + Q0M'1l + Q1M'0l
     128 |      128      | 128  
T = Q'0M0| Q'0M1 + Q'1M0 | Q'1M1
S = awc(V0 + T0) | awc(0?1 + V1 + T1) | 0?1 + V2 + T2
           128      |   128   
tmp = awc(S0h + S1) | 0?1 + S2
         64     | 64 
res = awc(tmp0h + tmp1l) | 0?1 + tmp1h
note: carries might be impossible, try to speed it all up?
tests.
